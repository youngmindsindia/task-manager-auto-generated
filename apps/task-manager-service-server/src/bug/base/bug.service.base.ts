/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Bug as PrismaBug } from "@prisma/client";

export class BugServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BugCountArgs, "select">): Promise<number> {
    return this.prisma.bug.count(args);
  }

  async bugs<T extends Prisma.BugFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BugFindManyArgs>
  ): Promise<PrismaBug[]> {
    return this.prisma.bug.findMany<Prisma.BugFindManyArgs>(args);
  }
  async bug<T extends Prisma.BugFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BugFindUniqueArgs>
  ): Promise<PrismaBug | null> {
    return this.prisma.bug.findUnique(args);
  }
  async createBug<T extends Prisma.BugCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BugCreateArgs>
  ): Promise<PrismaBug> {
    return this.prisma.bug.create<T>(args);
  }
  async updateBug<T extends Prisma.BugUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BugUpdateArgs>
  ): Promise<PrismaBug> {
    return this.prisma.bug.update<T>(args);
  }
  async deleteBug<T extends Prisma.BugDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BugDeleteArgs>
  ): Promise<PrismaBug> {
    return this.prisma.bug.delete(args);
  }
}
