/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BugService } from "../bug.service";
import { BugCreateInput } from "./BugCreateInput";
import { Bug } from "./Bug";
import { BugFindManyArgs } from "./BugFindManyArgs";
import { BugWhereUniqueInput } from "./BugWhereUniqueInput";
import { BugUpdateInput } from "./BugUpdateInput";

export class BugControllerBase {
  constructor(protected readonly service: BugService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bug })
  async createBug(@common.Body() data: BugCreateInput): Promise<Bug> {
    return await this.service.createBug({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bug] })
  @ApiNestedQuery(BugFindManyArgs)
  async bugs(@common.Req() request: Request): Promise<Bug[]> {
    const args = plainToClass(BugFindManyArgs, request.query);
    return this.service.bugs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bug })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bug(@common.Param() params: BugWhereUniqueInput): Promise<Bug | null> {
    const result = await this.service.bug({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bug })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBug(
    @common.Param() params: BugWhereUniqueInput,
    @common.Body() data: BugUpdateInput
  ): Promise<Bug | null> {
    try {
      return await this.service.updateBug({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bug })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBug(
    @common.Param() params: BugWhereUniqueInput
  ): Promise<Bug | null> {
    try {
      return await this.service.deleteBug({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
